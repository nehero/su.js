{"version":3,"sources":["xu.js"],"names":["xu","selector","this","el","document","querySelectorAll","prototype","css","styles","i","length","property","style","setClass","cl","className","appendClass","hasClass","indexOf","classNames","classes","push","removeClass","split","splice","join","on","event","callback","addEventListener","attr","attributes","attribute","text","currentText","innerHTML","each","ajax","options","Promise","resolve","reject","http","XMLHttpRequest","open","method","toUpperCase","url","onreadystatechange","readyState","DONE","status","JSON","parse","responseText","Error","data","setRequestHeader","stringify","headers","key","value","send","get","post","collection","module","exports","window"],"mappings":"CAAA,WACE,GAAIA,GAAK,WACP,GAAIA,GAAK,SAASC,GAEhB,MAAIC,gBAAgBF,GACI,gBAAZC,IAIRC,KAAKC,IAAMF,GACJC,WAEPA,KAAKC,GAAKC,SAASC,iBAAiBJ,IAG/B,GAAID,GAAGC,GAuKlB,OAnKAD,GAAGM,UAAUC,IAAM,SAASC,GAC1B,IAAI,GAAIC,GAAE,EAAEA,EAAEP,KAAKC,GAAGO,OAAOD,IAC3B,IAAK,GAAIE,KAAYH,GACnBN,KAAKC,GAAGM,GAAGG,MAAMD,GAAYH,EAAOG,IAK1CX,EAAGM,UAAUO,SAAW,SAASC,GAC/B,IAAI,GAAIL,GAAE,EAAEA,EAAEP,KAAKC,GAAGO,OAAOD,IAC3BP,KAAKC,GAAGM,GAAGM,UAAYD,GAI3Bd,EAAGM,UAAUU,YAAc,SAASF,GAClC,IAAI,GAAIL,GAAE,EAAEA,EAAEP,KAAKC,GAAGO,OAAOD,IAC3BP,KAAKC,GAAGM,GAAGM,WAAa,IAAMD,GAIlCd,EAAGM,UAAUW,SAAW,SAASH,GAC/B,IAAI,GAAIL,GAAE,EAAEA,EAAEP,KAAKC,GAAGO,OAAOD,IAC3B,GAAwC,IAApCP,KAAKC,GAAGM,GAAGM,UAAUG,QAAQJ,GAC/B,OAAO,CAGX,QAAO,GAGTd,EAAGM,UAAUa,WAAa,WACxBC,UACA,KAAI,GAAIX,GAAE,EAAEA,EAAEP,KAAKC,GAAGO,OAAOD,IAC3BW,QAAQC,KAAKnB,KAAKC,GAAGM,GAAGM,UAE1B,OAAOK,UAGTpB,EAAGM,UAAUgB,YAAc,SAASR,GAClC,IAAK,GAAIL,GAAI,EAAGA,EAAIP,KAAKC,GAAGO,OAAQD,IAAK,CACvC,GAAIW,GAAUlB,KAAKC,GAAGM,GAAGM,UAAUQ,MAAM,IACd,KAAvBH,EAAQF,QAAQJ,KAClBM,EAAQI,OAAOJ,EAAQF,QAAQJ,GAAK,GACpCZ,KAAKC,GAAGM,GAAGM,UAAYK,EAAQK,KAAK,QAK1CzB,EAAGM,UAAUoB,GAAK,SAASC,EAAOC,GAChC,IAAI,GAAInB,GAAE,EAAEA,EAAEP,KAAKC,GAAGO,OAAOD,IAC3BP,KAAKC,GAAGM,GAAGoB,iBAAiBF,EAAOC,IAIvC5B,EAAGM,UAAUwB,KAAO,SAASC,GAE3B,GAAyB,gBAAdA,GACT,IAAI,GAAItB,GAAE,EAAEA,EAAEP,KAAKC,GAAGO,OAAOD,IAC3B,MAAOP,MAAKC,GAAGM,GAAGsB,EAItB,KAAK,GAAIC,KAAaD,GACpB,IAAI,GAAItB,GAAE,EAAEA,EAAEP,KAAKC,GAAGO,OAAOD,IAC3BP,KAAKC,GAAGM,GAAGuB,GAAaD,EAAWC,IAKzChC,EAAGM,UAAU2B,KAAO,SAASA,GAE3B,IAAI,GADAC,MACIzB,EAAE,EAAEA,EAAEP,KAAKC,GAAGO,OAAOD,IAIR,mBAARwB,GACTC,EAAYb,KAAKnB,KAAKC,GAAGM,GAAG0B,WAE5BjC,KAAKC,GAAGM,GAAG0B,UAAYF,CAK3B,OAA0B,IAAtBC,EAAYxB,OACPwB,EAAY,GACVA,EAAYxB,OAAS,EACvBwB,EADF,QAKTlC,EAAGM,UAAU8B,KAAO,SAASR,GAC3B,IAAK,GAAInB,GAAI,EAAGA,EAAIP,KAAKC,GAAGO,OAAQD,IAElCmB,EAASnB,EAAGP,KAAKC,GAAGM,KAIxBT,EAAGqC,KAAO,SAASC,GACjB,MAAO,IAAIC,SAAQ,SAASC,EAASC,GACnC,GAAIC,GAAO,GAAIC,eAEfD,GAAKE,KAAKN,EAAQO,OAAOC,cAAeR,EAAQS,KAAK,GAErDL,EAAKM,mBAAqB,WACpBN,EAAKO,YAAcN,eAAeO,OACjB,KAAfR,EAAKS,OACPX,EAAQY,KAAKC,MAAMX,EAAKY,eAExBb,EAAOc,MAAM,sCAAwCb,EAAKS,WAMhEb,EAAQkB,KAAOlB,EAAQkB,MAAQ,GAIK,QAAhClB,EAAQO,OAAOC,gBACjBJ,EAAKe,iBAAiB,eAAgB,oBACtCnB,EAAQkB,KAAOJ,KAAKM,UAAUpB,EAAQkB,OAIpClB,EAAQqB,SACV3D,EAAGoC,KAAKE,EAAQqB,QAAS,SAASC,EAAKC,GACrCnB,EAAKe,iBAAiBG,EAAKC,KAI/BnB,EAAKoB,KAAKxB,EAAQkB,SAItBxD,EAAG+D,IAAM,SAAShB,GAChB,MAAO/C,GAAGqC,MACRQ,OAAQ,MACRE,IAAKA,KAIT/C,EAAGgE,KAAO,SAASjB,EAAKS,EAAMG,GAC5B,MAAO3D,GAAGqC,MACRQ,OAAQ,OACRE,IAAKA,EACLS,KAAMA,EACNG,QAASA,KAIb3D,EAAGoC,KAAO,SAAS6B,EAAYrC,GAC7B,GAAyB,eAAdqC,GACT,IAAK,GAAIxD,GAAI,EAAGA,EAAIwD,EAAWvD,OAAQD,IACrCmB,EAASnB,EAAGwD,EAAWxD,GAI3B,IAAyB,gBAAdwD,GACT,IAAK,GAAIL,KAAOK,GACdrC,EAASgC,EAAKK,EAAWL,KAKxB5D,IAGa,oBAAXkE,SAAoD,mBAAnBA,QAAOC,QACjDD,OAAOC,QAAUnE,EAEjBoE,OAAOpE,GAAKA","file":"xu.min.js","sourcesContent":["(function() {\n  var xu = (function() {\n    var xu = function(selector) {\n      // Allows calling of xu without the 'new' keyword\n      if (this instanceof xu) {\n        if(typeof selector == 'object') {\n          // Constructor was passed a HTML Node,\n          // Manually assign this.el as an array containing the single Node,\n          // so as to emulate the results of document.querySelectorAll()\n          this.el = [selector];\n          return this;\n        } else {\n          this.el = document.querySelectorAll(selector);\n        }\n      } else {\n        return new xu(selector);\n      }\n    };\n\n    xu.prototype.css = function(styles) {\n      for(var i=0;i<this.el.length;i++) {\n        for (var property in styles) {\n          this.el[i].style[property] = styles[property];\n        }\n      }\n    };\n\n    xu.prototype.setClass = function(cl) {\n      for(var i=0;i<this.el.length;i++) {\n        this.el[i].className = cl;\n      }\n    };\n\n    xu.prototype.appendClass = function(cl) {\n      for(var i=0;i<this.el.length;i++) {\n        this.el[i].className += ' ' + cl;\n      }\n    };\n\n    xu.prototype.hasClass = function(cl) {\n      for(var i=0;i<this.el.length;i++) {\n        if (this.el[i].className.indexOf(cl) == -1) {\n          return false; // Immediately return, no class found in the set of matched objects.\n        }\n      }\n      return true; // Made it through the loop above without returning, all objects have said class\n    };\n\n    xu.prototype.classNames = function() {\n      classes = [];\n      for(var i=0;i<this.el.length;i++) {\n        classes.push(this.el[i].className);\n      }\n      return classes;\n    };\n\n    xu.prototype.removeClass = function(cl) {\n      for (var i = 0; i < this.el.length; i++) {\n        var classes = this.el[i].className.split(' ');\n        if (classes.indexOf(cl) != -1) {\n          classes.splice(classes.indexOf(cl), 1);\n          this.el[i].className = classes.join(' ');\n        }\n      }\n    };\n\n    xu.prototype.on = function(event, callback) {\n      for(var i=0;i<this.el.length;i++) {\n        this.el[i].addEventListener(event, callback);\n      }\n    };\n\n    xu.prototype.attr = function(attributes) {\n      // Getter\n      if (typeof attributes == 'string') {\n        for(var i=0;i<this.el.length;i++) {\n          return this.el[i][attributes];\n        }\n      }\n      // Setter\n      for (var attribute in attributes) {\n        for(var i=0;i<this.el.length;i++) {\n          this.el[i][attribute] = attributes[attribute];\n        }\n      }\n    };\n\n    xu.prototype.text = function(text) {\n      var currentText = [];\n      for(var i=0;i<this.el.length;i++) {\n        // if text is undefined then we are calling as a 'getter' so\n        // lets store an array of all of the elements text and return it to\n        // the user\n        if (typeof text == 'undefined') {\n          currentText.push(this.el[i].innerHTML);\n        } else {\n          this.el[i].innerHTML = text;\n        }\n      }\n\n      // Return just the first result if there is only one\n      if (currentText.length == 1) {\n        return currentText[0];\n      } else if (currentText.length > 1) {\n        return currentText;\n      }\n    };\n\n    xu.prototype.each = function(callback) {\n      for (var i = 0; i < this.el.length; i++) {\n        // How to return instance of xu element???\n        callback(i, this.el[i]);\n      }\n    };\n\n    xu.ajax = function(options) {\n      return new Promise(function(resolve, reject) {\n        var http = new XMLHttpRequest();\n\n        http.open(options.method.toUpperCase(), options.url, true);\n\n        http.onreadystatechange = function() {\n          if (http.readyState == XMLHttpRequest.DONE) {\n            if (http.status == 200) {\n              resolve(JSON.parse(http.responseText));\n            } else {\n              reject(Error('Server responded with a status of: ' + http.status));\n            }\n          }\n        };\n\n        // So we're not sending an undefined dataset to the server\n        options.data = options.data || '';\n\n        // If the request type is post\n        // set header to default data type of json\n        if (options.method.toUpperCase() == 'POST') {\n          http.setRequestHeader('Content-type', 'application/json');\n          options.data = JSON.stringify(options.data);\n        }\n\n        // Set all headers\n        if (options.headers) {\n          xu.each(options.headers, function(key, value) {\n            http.setRequestHeader(key, value);\n          });\n        }\n\n        http.send(options.data);\n      });\n    };\n\n    xu.get = function(url) {\n      return xu.ajax({\n        method: 'GET',\n        url: url\n      });\n    };\n\n    xu.post = function(url, data, headers) {\n      return xu.ajax({\n        method: 'POST',\n        url: url,\n        data: data,\n        headers: headers\n      });\n    };\n\n    xu.each = function(collection, callback) {\n      if (typeof collection == 'array') {\n        for (var i = 0; i < collection.length; i++) {\n          callback(i, collection[i]);\n        }\n      }\n\n      if (typeof collection == 'object') {\n        for (var key in collection) {\n          callback(key, collection[key]);\n        }\n      }\n    };\n\n    return xu;\n  })();\n\n  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n    module.exports = xu;\n  } else {\n    window.xu = xu;\n  }\n})();\n"],"sourceRoot":"/source/"}